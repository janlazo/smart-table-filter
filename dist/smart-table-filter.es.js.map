{"version":3,"file":"smart-table-filter.es.js","sources":["../node_modules/smart-table-operators/dist/index.mjs","../node_modules/smart-table-json-pointer/dist/index.mjs","../index.js"],"sourcesContent":["const swap = f => (a, b) => f(b, a);\n\nconst compose = (first, ...fns) => (...args) => fns.reduce((previous, current) => current(previous), first(...args));\n\nconst curry = (fn, arityLeft) => {\n\tconst arity = arityLeft || fn.length;\n\treturn (...args) => {\n\t\tconst argLength = args.length || 1;\n\t\tif (arity === argLength) {\n\t\t\treturn fn(...args);\n\t\t}\n\t\tconst func = (...moreArgs) => fn(...args, ...moreArgs);\n\t\treturn curry(func, arity - args.length);\n\t};\n};\n\nconst apply = fn => (...args) => fn(...args);\n\nconst tap = fn => arg => {\n\tfn(arg);\n\treturn arg;\n};\n\nexport { swap, compose, curry, apply, tap };\n","function pointer(path) {\n\n\tconst parts = path.split('.');\n\n\tfunction partial(obj = {}, parts = []) {\n\t\tconst p = parts.shift();\n\t\tconst current = obj[p];\n\t\treturn (current === undefined || parts.length === 0) ?\n\t\t\tcurrent : partial(current, parts);\n\t}\n\n\tfunction set(target, newTree) {\n\t\tlet current = target;\n\t\tconst [leaf, ...intermediate] = parts.reverse();\n\t\tfor (const key of intermediate.reverse()) {\n\t\t\tif (current[key] === undefined) {\n\t\t\t\tcurrent[key] = {};\n\t\t\t\tcurrent = current[key];\n\t\t\t}\n\t\t}\n\t\tcurrent[leaf] = Object.assign(current[leaf] || {}, newTree);\n\t\treturn target;\n\t}\n\n\treturn {\n\t\tget(target) {\n\t\t\treturn partial(target, [...parts])\n\t\t},\n\t\tset\n\t}\n}\n\nexport default pointer;\n","import {compose} from 'smart-table-operators';\nimport pointer from 'smart-table-json-pointer';\n\nfunction typeExpression(type) {\n\tswitch (type) {\n\t\tcase 'boolean':\n\t\t\treturn Boolean;\n\t\tcase 'number':\n\t\t\treturn Number;\n\t\tcase 'date':\n\t\t\treturn val => new Date(val);\n\t\tdefault:\n\t\t\treturn compose(String, val => val.toLowerCase());\n\t}\n}\n\nconst not = fn => input => !fn(input);\n\nconst is = value => input => Object.is(value, input);\nconst lt = value => input => input < value;\nconst gt = value => input => input > value;\nconst equals = value => input => value === input;\nconst includes = value => input => input.includes(value);\n\nconst operators = {\n\tincludes,\n\tis,\n\tisNot: compose(is, not),\n\tlt,\n\tgte: compose(lt, not),\n\tgt,\n\tlte: compose(gt, not),\n\tequals,\n\tnotEquals: compose(equals, not)\n};\n\nconst every = fns => (...args) => fns.every(fn => fn(...args));\n\nexport function predicate({value = '', operator = 'includes', type = 'string'}) {\n\tconst typeIt = typeExpression(type);\n\tconst operateOnTyped = compose(typeIt, operators[operator]);\n\tconst predicateFunc = operateOnTyped(value);\n\treturn compose(typeIt, predicateFunc);\n}\n\n// Avoid useless filter lookup (improve perf)\nfunction normalizeClauses(conf) {\n\tconst output = {};\n\tconst validPath = Object.keys(conf).filter(path => Array.isArray(conf[path]));\n\tvalidPath.forEach(path => {\n\t\tconst validClauses = conf[path].filter(c => c.value !== '');\n\t\tif (validClauses.length > 0) {\n\t\t\toutput[path] = validClauses;\n\t\t}\n\t});\n\treturn output;\n}\n\nexport default function filter(filter) {\n\tconst normalizedClauses = normalizeClauses(filter);\n\tconst funcList = Object.keys(normalizedClauses).map(path => {\n\t\tconst getter = pointer(path).get;\n\t\tconst clauses = normalizedClauses[path].map(predicate);\n\t\treturn compose(getter, every(clauses));\n\t});\n\tconst filterPredicate = every(funcList);\n\n\treturn array => array.filter(filterPredicate);\n}\n"],"names":[],"mappings":"AAEA,MAAM,OAAO,GAAG,CAAC,KAAK,EAAE,GAAG,GAAG,KAAK,CAAC,GAAG,IAAI,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,OAAO,KAAK,OAAO,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;;ACFpH,SAAS,OAAO,CAAC,IAAI,EAAE;;CAEtB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;CAE9B,SAAS,OAAO,CAAC,GAAG,GAAG,EAAE,EAAE,KAAK,GAAG,EAAE,EAAE;EACtC,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;EACxB,MAAM,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACvB,OAAO,CAAC,OAAO,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;GAClD,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;EACnC;;CAED,SAAS,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE;EAC7B,IAAI,OAAO,GAAG,MAAM,CAAC;EACrB,MAAM,CAAC,IAAI,EAAE,GAAG,YAAY,CAAC,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;EAChD,KAAK,MAAM,GAAG,IAAI,YAAY,CAAC,OAAO,EAAE,EAAE;GACzC,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;IAC/B,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;IAClB,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;IACvB;GACD;EACD,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;EAC5D,OAAO,MAAM,CAAC;EACd;;CAED,OAAO;EACN,GAAG,CAAC,MAAM,EAAE;GACX,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;GAClC;EACD,GAAG;EACH;CACD;;AC3BD,SAAS,cAAc,CAAC,IAAI,EAAE;CAC7B,QAAQ,IAAI;EACX,KAAK,SAAS;GACb,OAAO,OAAO,CAAC;EAChB,KAAK,QAAQ;GACZ,OAAO,MAAM,CAAC;EACf,KAAK,MAAM;GACV,OAAO,GAAG,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;EAC7B;GACC,OAAO,OAAO,CAAC,MAAM,EAAE,GAAG,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;EAClD;CACD;;AAED,MAAM,GAAG,GAAG,EAAE,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;;AAEtC,MAAM,EAAE,GAAG,KAAK,IAAI,KAAK,IAAI,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACrD,MAAM,EAAE,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,CAAC;AAC3C,MAAM,EAAE,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,CAAC;AAC3C,MAAM,MAAM,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,KAAK,CAAC;AACjD,MAAM,QAAQ,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;AAEzD,MAAM,SAAS,GAAG;CACjB,QAAQ;CACR,EAAE;CACF,KAAK,EAAE,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC;CACvB,EAAE;CACF,GAAG,EAAE,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC;CACrB,EAAE;CACF,GAAG,EAAE,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC;CACrB,MAAM;CACN,SAAS,EAAE,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;CAC/B,CAAC;;AAEF,MAAM,KAAK,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;;AAE/D,AAAO,SAAS,SAAS,CAAC,CAAC,KAAK,GAAG,EAAE,EAAE,QAAQ,GAAG,UAAU,EAAE,IAAI,GAAG,QAAQ,CAAC,EAAE;CAC/E,MAAM,MAAM,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;CACpC,MAAM,cAAc,GAAG,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;CAC5D,MAAM,aAAa,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;CAC5C,OAAO,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;CACtC;;;AAGD,SAAS,gBAAgB,CAAC,IAAI,EAAE;CAC/B,MAAM,MAAM,GAAG,EAAE,CAAC;CAClB,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CAC9E,SAAS,CAAC,OAAO,CAAC,IAAI,IAAI;EACzB,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC;EAC5D,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;GAC5B,MAAM,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;GAC5B;EACD,CAAC,CAAC;CACH,OAAO,MAAM,CAAC;CACd;;AAED,AAAe,SAAS,MAAM,CAAC,MAAM,EAAE;CACtC,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;CACnD,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI;EAC3D,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;EACjC,MAAM,OAAO,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;EACvD,OAAO,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC;CACH,MAAM,eAAe,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;;CAExC,OAAO,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;CAC9C;;;;;"}