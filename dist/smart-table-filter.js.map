{"version":3,"file":"smart-table-filter.js","sources":["../node_modules/smart-table-operators/dist/index.mjs","../node_modules/smart-table-json-pointer/dist/index.mjs","../index.js"],"sourcesContent":["const swap = f => (a, b) => f(b, a);\n\nconst compose = (first, ...fns) => (...args) => fns.reduce((previous, current) => current(previous), first(...args));\n\nconst curry = (fn, arityLeft) => {\n\tconst arity = arityLeft || fn.length;\n\treturn (...args) => {\n\t\tconst argLength = args.length || 1;\n\t\tif (arity === argLength) {\n\t\t\treturn fn(...args);\n\t\t}\n\t\tconst func = (...moreArgs) => fn(...args, ...moreArgs);\n\t\treturn curry(func, arity - args.length);\n\t};\n};\n\nconst apply = fn => (...args) => fn(...args);\n\nconst tap = fn => arg => {\n\tfn(arg);\n\treturn arg;\n};\n\nexport { swap, compose, curry, apply, tap };\n","function pointer(path) {\n\n\tconst parts = path.split('.');\n\n\tfunction partial(obj = {}, parts = []) {\n\t\tconst p = parts.shift();\n\t\tconst current = obj[p];\n\t\treturn (current === undefined || parts.length === 0) ?\n\t\t\tcurrent : partial(current, parts);\n\t}\n\n\tfunction set(target, newTree) {\n\t\tlet current = target;\n\t\tconst [leaf, ...intermediate] = parts.reverse();\n\t\tfor (const key of intermediate.reverse()) {\n\t\t\tif (current[key] === undefined) {\n\t\t\t\tcurrent[key] = {};\n\t\t\t\tcurrent = current[key];\n\t\t\t}\n\t\t}\n\t\tcurrent[leaf] = Object.assign(current[leaf] || {}, newTree);\n\t\treturn target;\n\t}\n\n\treturn {\n\t\tget(target) {\n\t\t\treturn partial(target, [...parts])\n\t\t},\n\t\tset\n\t}\n}\n\nexport default pointer;\n","import {compose} from 'smart-table-operators';\nimport pointer from 'smart-table-json-pointer';\n\nfunction typeExpression (type) {\n  switch (type) {\n    case 'boolean':\n      return Boolean;\n    case 'number':\n      return Number;\n    case 'date':\n      return (val) => new Date(val);\n    default:\n      return compose(String, (val) => val.toLowerCase());\n  }\n}\n\nconst not = (fn) => (input) => !fn(input);\n\nconst is = value => input => Object.is(value, input);\nconst lt = value => input => input < value;\nconst gt = value => input => input > value;\nconst equals = value => input => value == input;\nconst includes = value => input => input.includes(value);\n\nconst operators = {\n  includes,\n  is,\n  isNot: compose(is, not),\n  lt,\n  gte: compose(lt, not),\n  gt,\n  lte: compose(gt, not),\n  equals,\n  notEquals: compose(equals, not)\n};\n\nconst every = fns => (...args) => fns.every(fn => fn(...args));\n\nexport function predicate ({value = '', operator = 'includes', type = 'string'}) {\n  const typeIt = typeExpression(type);\n  const operateOnTyped = compose(typeIt, operators[operator]);\n  const predicateFunc = operateOnTyped(value);\n  return compose(typeIt, predicateFunc);\n}\n\n//avoid useless filter lookup (improve perf)\nfunction normalizeClauses (conf) {\n  const output = {};\n  const validPath = Object.keys(conf).filter(path => Array.isArray(conf[path]));\n  validPath.forEach(path => {\n    const validClauses = conf[path].filter(c => c.value !== '');\n    if (validClauses.length) {\n      output[path] = validClauses;\n    }\n  });\n  return output;\n}\n\nexport default function filter (filter) {\n  const normalizedClauses = normalizeClauses(filter);\n  const funcList = Object.keys(normalizedClauses).map(path => {\n    const getter = pointer(path).get;\n    const clauses = normalizedClauses[path].map(predicate);\n    return compose(getter, every(clauses));\n  });\n  const filterPredicate = every(funcList);\n\n  return (array) => array.filter(filterPredicate);\n}"],"names":[],"mappings":";;;AAEA,MAAM,OAAO,GAAG,CAAC,KAAK,EAAE,GAAG,GAAG,KAAK,CAAC,GAAG,IAAI,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,OAAO,KAAK,OAAO,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;;ACFpH,SAAS,OAAO,CAAC,IAAI,EAAE;;CAEtB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;CAE9B,SAAS,OAAO,CAAC,GAAG,GAAG,EAAE,EAAE,KAAK,GAAG,EAAE,EAAE;EACtC,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;EACxB,MAAM,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACvB,OAAO,CAAC,OAAO,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;GAClD,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;EACnC;;CAED,SAAS,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE;EAC7B,IAAI,OAAO,GAAG,MAAM,CAAC;EACrB,MAAM,CAAC,IAAI,EAAE,GAAG,YAAY,CAAC,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;EAChD,KAAK,MAAM,GAAG,IAAI,YAAY,CAAC,OAAO,EAAE,EAAE;GACzC,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;IAC/B,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;IAClB,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;IACvB;GACD;EACD,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;EAC5D,OAAO,MAAM,CAAC;EACd;;CAED,OAAO;EACN,GAAG,CAAC,MAAM,EAAE;GACX,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;GAClC;EACD,GAAG;EACH;CACD;;AC3BD,SAAS,cAAc,EAAE,IAAI,EAAE;EAC7B,QAAQ,IAAI;IACV,KAAK,SAAS;MACZ,OAAO,OAAO,CAAC;IACjB,KAAK,QAAQ;MACX,OAAO,MAAM,CAAC;IAChB,KAAK,MAAM;MACT,OAAO,CAAC,GAAG,KAAK,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;IAChC;MACE,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;GACtD;CACF;;AAED,MAAM,GAAG,GAAG,CAAC,EAAE,KAAK,CAAC,KAAK,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;;AAE1C,MAAM,EAAE,GAAG,KAAK,IAAI,KAAK,IAAI,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACrD,MAAM,EAAE,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,CAAC;AAC3C,MAAM,EAAE,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,CAAC;AAC3C,MAAM,MAAM,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC;AAChD,MAAM,QAAQ,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;AAEzD,MAAM,SAAS,GAAG;EAChB,QAAQ;EACR,EAAE;EACF,KAAK,EAAE,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC;EACvB,EAAE;EACF,GAAG,EAAE,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC;EACrB,EAAE;EACF,GAAG,EAAE,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC;EACrB,MAAM;EACN,SAAS,EAAE,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;CAChC,CAAC;;AAEF,MAAM,KAAK,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;;AAE/D,AAAO,SAAS,SAAS,EAAE,CAAC,KAAK,GAAG,EAAE,EAAE,QAAQ,GAAG,UAAU,EAAE,IAAI,GAAG,QAAQ,CAAC,EAAE;EAC/E,MAAM,MAAM,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;EACpC,MAAM,cAAc,GAAG,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;EAC5D,MAAM,aAAa,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;EAC5C,OAAO,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;CACvC;;;AAGD,SAAS,gBAAgB,EAAE,IAAI,EAAE;EAC/B,MAAM,MAAM,GAAG,EAAE,CAAC;EAClB,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EAC9E,SAAS,CAAC,OAAO,CAAC,IAAI,IAAI;IACxB,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC;IAC5D,IAAI,YAAY,CAAC,MAAM,EAAE;MACvB,MAAM,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;KAC7B;GACF,CAAC,CAAC;EACH,OAAO,MAAM,CAAC;CACf;;AAED,AAAe,SAAS,MAAM,EAAE,MAAM,EAAE;EACtC,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;EACnD,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI;IAC1D,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;IACjC,MAAM,OAAO,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACvD,OAAO,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;GACxC,CAAC,CAAC;EACH,MAAM,eAAe,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;;EAExC,OAAO,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;;;;;;;;;;;;"}